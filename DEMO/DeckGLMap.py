
import requests
import io
import base64
import numpy as np
from PIL import Image
import xtgeo
import dash

import webviz_subsurface_components as wsc


if __name__ == "__main__":

    # Download an example surface grid and load as xtgeo.RegularSurface
    # Note that this surface is small and is quick to convert.
    # A larger grid can easily be generated by refining the downloaded surface:
    # surface.refine(8)
    # surface.to_file("refined.gri")

    map_bounds = [-122.519, 37.7045, -122.355, 37.829]

    # img_url = "https://dlssdfsandbox.blob.core.windows.net/dls/SpatialDB/work/5099.png?sp=r&st=2022-12-12T13:17:22Z&se=2023-08-29T21:17:22Z&spr=https&sv=2021-06-08&sr=b&sig=VNCOmTpb886a9i0PRIEkTxcYtwdG8%2FejCbsjuY9RO%2FM%3D"
    img_url="https://dlssdfsandbox.blob.core.windows.net/dls/SpatialDB/processed/surface_coordinates/BG4FROST_GULLFAKS/images/5098.png?se=2023-02-06T16%3A07%3A03Z&sp=rwd&sv=2021-08-06&sr=c&sig=PWtOLJnA6O0ESDLg6b1Mt82keCns2HcQpe9B1VqFJK4%3D"
    app = dash.Dash(__name__)
    app.layout = dash.html.Div(
        [
            wsc.DeckGLMap(
                id="map",
                bounds=map_bounds,
                layers=[
                    {
                        "@@type": "BitmapLayer",
                        "id": "map-layer",
                        "image": img_url,
                        "bounds": map_bounds,
                    },
                ],
                views={
                    "layout": [1, 1],

                    "viewports": [
                        {
                            "id": "view_2",
                            "show3D": False,
                            "name": "Depth surface",
                            "layerIds": ["map-layer"],
                            "isSync": False,
                        },
                    ],
                },

            )
        ]
    )

app.run_server()
